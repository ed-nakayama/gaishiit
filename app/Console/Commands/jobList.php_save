<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;

use Illuminate\Support\Facades\Storage;

use App\Models\Job;


class JobList extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'command:joblist';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'get job list';

	private $CSV_DIR = 'public/comp_jobs/joblist';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        
		$csvFile = "public/comp_jobs/joblist/joblist_" . date("Ymd_His") . ".csv";


		$jobList = Job::Join('companies', 'jobs.company_id','=','companies.id')
			->leftJoin('units', 'jobs.unit_id','=','units.id')
			->leftJoin('job_cat_details', 'jobs.job_cat_detail_id','=','job_cat_details.id')
			->selectRaw('jobs.*, companies.salesforce_id as salesforce_id, units.name as unit_name, job_cat_details.name as job_cat_name')
			->orderBy('jobs.company_id')
			->orderBy('jobs.id')
			->get();


		$arg = 0;
		foreach ($jobList as $job) {
			if (!empty($job->locations)) {

				$loc = explode(",", $job->locations);

				$str = array();
				for ($i = 0; $i < count($loc); $i++) {
					$temp = ConstLocation::find($loc[$i]);

					if (!empty($temp->name)) $str[] = $temp->name;
				}

				$jobList[$arg++]->locations = implode("/", $str);

			} else {
				$jobList[$arg++]->locations = '';
			}
		}


		$header = '"Saleforce ID","名前","JD No.","部署名","職種名","Category","Location","勤務地詳細/その他","JD URL","職務内容"';
		$header = mb_convert_encoding($header, 'SJIS-WIN', 'UTF8');
		Storage::append($csvFile, $header);

		foreach ($jobList as $job) {

			// コード変換
			$job_name      = mb_convert_encoding($job->name           ,'SJIS-WIN' ,'UTF-8');
			$job_code      = mb_convert_encoding($job->code           ,'SJIS-WIN' ,'UTF-8');
			$unit_name     = mb_convert_encoding($job->unit_name      ,'SJIS-WIN' ,'UTF-8');
			$job_cat_name  = mb_convert_encoding($job->job_cat_name   ,'SJIS-WIN' ,'UTF-8');
			$sub_category  = mb_convert_encoding($job->sub_category   ,'SJIS-WIN' ,'UTF-8');
			$location_name = mb_convert_encoding($job->locations      ,'SJIS-WIN' ,'UTF-8');
			$working_place = mb_convert_encoding($job->working_place  ,'SJIS-WIN' ,'UTF-8');
			$url           = mb_convert_encoding($job->url            ,'SJIS-WIN' ,'UTF-8');
			$intro         = mb_convert_encoding($job->intro          ,'SJIS-WIN' ,'UTF-8');

			$intro         = str_replace("\n" ,'<br>' ,$intro);
			$sub_category  = str_replace("\n ",'<br>' ,$sub_category);
			$working_place = str_replace("\n" ,'<br>' ,$working_place);
			$url           = str_replace("\n" ,'<br>' ,$url);

			$detail =  '"' . $job->salesforce_id . '"'
					. ',"' . $job_name      . '(' . $job->id . ')'  . '"'
					. ',"' . $job_code      . '"'
					. ',"' . $unit_name     . '"'
					. ',"' . $job_cat_name  . '"'
					. ',"' . $sub_category  . '"'
					. ',"' . $location_name . '"'
					. ',"' . $working_place . '"'
					. ',"' . $url           . '"'
					. ',"' . $intro         . '"'
					;

			Storage::append($csvFile, $detail);
		}

		// 古いcsv削除
		$this->delete_csv();
	}


/*******************************************
* 古いファイル削除
********************************************/
    private function delete_csv() {


		collect(\Storage::disk('local')->listContents($this->CSV_DIR, true))
		->each(function($file) {
		    if ($file['type'] == 'file' && $file['timestamp'] < now()->subDays(7)->getTimestamp()) {
				print_r("削除csv : ");
		        print_r(\Storage::disk('local')->path($file['path']) );
				print_r("\n");
				\Storage::disk('local')->delete($file['path']);
		    }
		});
	}


}

?>
